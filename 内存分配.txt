#include <cstdio>
#include <iostream>
#include <cstring>
#include <algorithm>
#define FOR(i,a,b) for(int i=a;i<=b;++i)
#define DWN(i,a,b) for(int i=a;i>=b;--i)
#define clr(f,z) memset(f,z,sizeof(f))

using namespace std;

const int mm = 2000+9;

int free_pos,use_pos;
class Memery
{
public:
    int id;
    int size;
    int begin;
    bool state;
    //int pre,next;
}M_free[mm];
class Use
{
public:
  int id;
  int size;
  int begin;
}M_use[mm];
int M_size,algorithm,Left_size,last_Alloction;
void push_use(int big,int begin,int id)
{
  bool give = 0;
  FOR(i,0,use_pos-1)
  if(M_use[i].size == 0)
  {
    M_use[i].id = id;
    M_use[i].size = big;
    M_use[i].begin = begin;
    give = true;
    break;
  }
  if(!give)
  {
    M_use[use_pos].id = id;
    M_use[use_pos].size = big;
    M_use[use_pos].begin = begin;
    use_pos++;
  }
}
void get_Free(int id)
{
  bool find = 0;
  FOR(i,0,use_pos-1)
  if(id == M_use[i].id)
  {
    find = true;
    id = i;
  }
  if(!find)
  {
    printf("没有此ID的程序!\n");
    return;
  }

  int sid=-1,tid=-1,z = 0;
  FOR(i,0,free_pos-1)
  if(M_use[id].begin == M_free[i].begin +M_free[i].size)
  {
    sid = i; z|=1;
  }
  else if(M_use[id].begin+M_use[id].size == M_free[i].begin)
  {
    tid = i; z|=2;
  }

  switch(z)
  {
  case 0:
      FOR(i,0,free_pos-1)
      if(M_free[i].size == 0)
      {
        M_free[i].begin = M_use[id].begin;
        M_free[i].size = M_use[id].size;
        id = -1;
      }
      if(id != -1)
      {
        M_free[free_pos].begin = M_use[id].begin;
        M_free[free_pos].size = M_use[id].size;
        free_pos++;
      }
      break;
  case 1:
      M_free[sid].size += M_use[id].size;
      break;
  case 2:
      M_free[tid].size += M_use[id].size;
      M_free[tid].begin = M_use[id].begin;
  case 3:
      M_free[sid].size += M_use[id].size + M_free[tid].size;
      M_free[tid].size = 0;
  }
  M_use[id].size = 0;
}
void showMemery()
{
  printf("空闲内存表：\n");
  FOR(i,0,free_pos-1)
  if(M_free[i].size != 0)
  {
    printf("begin: %d size: %d\n",M_free[i].begin,M_free[i].size);
  }
  printf("已用内存表: \n");
  FOR(i,0,use_pos-1)
  if(M_use[i].size != 0)
  {
    printf("id: %d begin: %d size: %d\n",M_use[i].id,M_use[i].begin,M_use[i].size);
  }

}
void alloction()
{
    printf("请输入需要分配的程序ID和内存大小：\n");
    int M_request,ID;
    scanf("%d%d",&ID,&M_request);
//    if(M_request>Left_size)
//    {
//        printf("内存分配失败!\n");
//        return;
//    }
    bool is_alloction = 0;
    if(algorithm == 1)
    {
      FOR(i,0,free_pos-1)
      {
        if(M_free[i].size >= M_request)
        {
          M_free[i].size -= M_request;
          push_use(M_request,M_free[i].begin,ID);
          M_free[i].begin += M_request;
          is_alloction = true;
        }
      }
      if(!is_alloction)
      {
        printf("申请的内存过大，无连续的满足条件的空间，请先回收内存！\n");
      }
    }
    else if(algorithm == 2)
    {
      FOR(i,last_Alloction,free_pos-1)
      {
        if(M_free[i].size >= M_request)
        {
          M_free[i].size -= M_request;
          push_use(M_request,M_free[i].begin,ID);
          M_free[i].begin += M_request;
          is_alloction = true;
        }
      }

      if(!is_alloction)
      {
        FOR(i,0,last_Alloction-1)
        {
          if(M_free[i].size >= M_request)
          {
            M_free[i].size -= M_request;
            push_use(M_request,M_free[i].begin,ID);
            M_free[i].begin += M_request;
            is_alloction = true;
          }
        }
        if(!is_alloction)
        {
          printf("申请的内存过大，无连续的满足条件的空间，请先回收内存！\n");
        }
      }
    }
    else if(algorithm == 3)
    {
      int Tid = -1;
      FOR(i,0,free_pos-1)
      if(M_free[i].size >= M_request)
      {
        if(Tid == -1)
          Tid = i;
        else if(M_free[i].size < M_free[Tid].size)
          Tid = i;
        is_alloction = true;
      }
      if(is_alloction)
      {
        M_free[Tid].size -= M_request;
        push_use(M_request,M_free[Tid].begin,ID);
        M_free[Tid].begin += M_request;
      }
      else printf("申请的内存过大，无连续的满足条件的空间，请先回收内存！\n");
    }

}
void freeMemery()
{
  printf("请输入要回收的程序ID：\n");
  int id;
  scanf("%d",&id);
  get_Free(id);
}
void output()
{
    printf("算法选择：1:首次适应算法 2：循环首次适应算法 3：最佳适应算法\n");
    scanf("%d",&algorithm);


    int choose;
    while(1)
    {
      printf("功能选择：1: 分配内存 2：回收内存 3：显示内存 4:退出\n");
      scanf("%d",&choose);
        switch(choose)
        {
            case 1:
                alloction(); break;
            case 2:
                freeMemery(); break;
            case 3:
                showMemery(); break;
            case 4: return;
            default:
                printf("错误操作!\n");
        }
    }
}
bool input()
{
    printf("请输入总的内存大小:\n");
    while(~scanf("%d",&M_size))
    {
      M_free[0].id = 1;
      M_free[0].size = M_size;
      M_free[0].state = 0;
      Left_size = M_size;
      M_free[0].begin = 0;
      free_pos = 1; use_pos = 0; last_Alloction = 0;
      return 1;
    }
    return 0;
}
int main()
{
        while(input())
        {
            output();
        }
        return 0;
}
